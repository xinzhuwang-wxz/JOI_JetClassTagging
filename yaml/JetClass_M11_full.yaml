selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   part_mask: ak.ones_like(part_energy)
   part_pt: np.hypot(part_px, part_py)
   part_pt_log: np.log(part_pt)
   part_e_log: np.log(part_energy)
   part_logptrel: np.log(part_pt/jet_pt)
   part_logerel: np.log(part_energy/jet_energy)
   part_deltaR: np.hypot(part_deta, part_dphi)
   part_d0: np.tanh(part_d0val)
   part_dz: np.tanh(part_dzval)
   part_d0e: np.tanh(part_d0err)
   part_dze: np.tanh(part_dzerr)
   ### part_d02: np.tanh(0.2*(1 if part_d0val > 0 else -1) * (math.abs(part_d0val)**0.25))
   ### part_dz2: np.tanh(0.2*(1 if part_dzval > 0 else -1) * (math.abs(part_dzval)**0.25))
   ### part_d0err2: np.tanh(0.2*(1 if part_d0err > 0 else -1) * (math.abs(part_d0err)**0.25))
   ### part_dzerr2: np.tanh(0.2*(1 if part_dzerr > 0 else -1) * (math.abs(part_dzerr)**0.25))

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
   pf_points:
      length: 50
      pad_mode: wrap
      vars: 
         - [part_dphi, null]
         - [part_deta, null]
   pf_features:
      length: 50
      pad_mode: wrap
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
      ###   - [part_pt_log, 1.7, 0.7]
      ###   - [part_e_log, 2.0, 0.7]
      ###   - [part_logptrel, -4.7, 0.7]
      ###   - [part_logerel, -4.7, 0.7]
      ###   - [part_deltaR, 0.2, 4.0]
      ###   - [part_charge, null]
      ###   - [part_isChargedHadron, null]
      ###   - [part_isNeutralHadron, null]
      ###   - [part_isPhoton, null]
      ###   - [part_isElectron, null]
      ###   - [part_isMuon, null]
      ###   - [part_d0, null]
      ###   - [part_d0err, 0, 1, 0, 1]
      ###   - [part_dz, null]
      ###   - [part_dzerr, 0, 1, 0, 1]
      ###   - [part_deta, null]
      ###   - [part_dphi, null]


         - [part_pt_log, -1.5, 1.0]
         - [part_e_log, -0.687, 1.0]
         - [part_logptrel, -4.7, 1.0]
         - [part_logerel, -4.473, 1.0]
         - [part_deltaR, 2.1, 2.3]
         - [part_charge, null]
       ###  - [part_isChargedHadron, null]
         - [part_isChargedKaon, null]
         - [part_isPion, null]
         - [part_isProton, null]
         - [part_isElectron, null]
         - [part_isMuon, null]
         - [part_isNeutralHadron, null]
         - [part_isPhoton, null]
       ###  - [part_isNeutron, null]
       ###  - [part_isAntiNeutron, null]
       ###  - [part_isLambda, null]

       ###  - [part_BHad, null]
       ###  - [part_isPi0, null]
       ###  - [part_isKLong, null]
       ###  - [part_isKShort, null]
         - [part_d0, null]
       ###  - [part_d0e, 0, 1, 0, 1]
         - [part_dz, null]
       ###  - [part_dze, 0, 1, 0, 1]
         - [part_deta, null]
         - [part_dphi, null]



   pf_vectors:
      length: 50
      pad_mode: wrap
      vars: 
         - [part_px, null]
         - [part_py, null]
         - [part_pz, null]
         - [part_energy, null]


 
   pf_mask:
      length: 50
      pad_mode: constant
      vars: 
         - [part_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
###   value: [label_QCD, label_Hbb, label_Hcc, label_Hgg, label_H4q, label_Hqql, label_Zqq, label_Wqq, label_Tbqq, label_Tbl]

###   value: [label_bb, label_cc, label_gg]
   value: [label_b, label_bbar, label_c, label_cbar, label_d, label_dbar, label_u, label_ubar, label_s, label_sbar, label_g]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)

observers:
   - jet_eta
######   - part_px
######   - btag
######   - ctag
######   - thrust
######   - jet_costheta
######   - jet_phi
   - jet_energy
######   - jet_nparticles
######   - jet_charge
######   - charge_nparticles
######   - leadMuonEn
######   - leadElecEn
######   - BHadPDG
######   - BDaus
######   - jet_sdmass
######   - jet_tau1
######   - jet_tau2
######   - jet_tau3
######   - jet_tau4

weights:


